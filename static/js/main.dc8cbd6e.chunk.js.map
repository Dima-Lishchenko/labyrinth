{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["counter","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","buildLabyrinth","size","state","container","document","getElementsByClassName","i","cell","createElement","setAttribute","classList","add","concat","sizeName","appendChild","cells","startGame","setState","randomNumber","Math","floor","random","startCell","innerHTML","createSteps","direction","steps","contains","splice","indexOf","randomSide","length","newStep","setTimeout","checkIfTrue","correctElem","addEventListener","event","clicked","target","getAttribute","newGame","window","location","reload","wasCreated","react_default","a","className","onClick","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dc8cbd6e.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.sass';\n\n\n\nlet counter = 0;\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      wasCreated: false,\n      // your can easily change number of cells, just change 'size' and 'sizeWord' properties for any available (f.e size=3, sizeWord='three')\n      size: 4, // for now available 3 and 4\n      sizeName: 'four' // for now available 'three' and 'four'\n    }\n  }\n\n  componentDidMount() {\n    this.buildLabyrinth();\n    this.startGame();\n  };\n\n\n  buildLabyrinth = () => {\n\n    let size = this.state.size;\n    let container = document.getElementsByClassName('labyrinth')[0]\n\n    // create labyrinth with property number of cells\n    for (let i = 0; i < size * size; i++) {\n      let cell = document.createElement('div');\n      cell.setAttribute('number', i + 1)\n      cell.classList.add(`${this.state.sizeName}-in-row`, 'cell')\n      container.appendChild(cell);\n    }\n\n    // set restricts for sides\n    let cells = document.getElementsByClassName('cell');\n\n    // top\n    for (let i = 0; i < size; i++) {\n      cells[i].classList.add('top');\n    }\n\n    // right\n    for (let i = size - 1; i < size * size; i = i + size) {\n      cells[i].classList.add('right');\n    }\n\n    // bottom\n    for (let i = size * size - size; i < size * size; i++) {\n      cells[i].classList.add('bottom')\n    }\n\n    // left\n    for (let i = 0; i <= 1 + size * (size - 1); i = i + size) {\n      cells[i].classList.add('left')\n    }\n\n  };\n\n  startGame = () => {\n    let size = this.state.size;\n    let cells = document.getElementsByClassName('cell');\n\n    // getting random cell to start\n    this.setState({\n      randomNumber: Math.floor(Math.random() * size * size)\n    }, () => {\n      let startCell = cells[this.state.randomNumber]\n      startCell.classList.add('start');\n      startCell.innerHTML = 'Start';\n      this.createSteps();\n    });\n  };\n\n  // show steps with delay\n  createSteps = () => {\n\n    let {size} = this.state;\n    let cells = document.getElementsByClassName('cell');\n    let direction = ['top', 'right', 'bottom', 'left'];\n    let steps = document.getElementsByClassName('container')[0];\n\n    // remove direction if not available for current position (for example we cannot move right if current position is on the right side)\n    cells[this.state.randomNumber].classList.contains('top') && direction.splice(direction.indexOf('top'), 1);\n    cells[this.state.randomNumber].classList.contains('right') && direction.splice(direction.indexOf('right'), 1);\n    cells[this.state.randomNumber].classList.contains('bottom') && direction.splice(direction.indexOf('bottom'), 1);\n    cells[this.state.randomNumber].classList.contains('left') && direction.splice(direction.indexOf('left'), 1);\n    let randomSide = direction[Math.floor(Math.random() * direction.length)];\n\n    // change current position according to new step\n    switch (randomSide) {\n      case 'top':\n        this.setState({\n          randomNumber: this.state.randomNumber - size\n        });\n        break;\n      case 'right':\n        this.setState({\n          randomNumber: this.state.randomNumber + 1\n        });\n        break;\n      case 'bottom':\n        this.setState({\n          randomNumber: this.state.randomNumber + size\n        });\n        break;\n      case 'left':\n        this.setState({\n          randomNumber: this.state.randomNumber - 1\n        });\n        break;\n      default:\n        return null;\n    }\n\n    counter++;\n\n    let newStep = document.createElement('div');\n    newStep.classList.add(randomSide);\n    steps.appendChild(newStep);\n\n    if (counter < 10) setTimeout(() => {\n      this.createSteps();\n    }, 100);\n    else {\n      setTimeout(() => {\n        cells[this.state.randomNumber].setAttribute('finish', 'true');\n        this.checkIfTrue(cells[this.state.randomNumber]);\n      }, 1000)\n    }\n\n  };\n\n  checkIfTrue = (correctElem) => {\n\n    let cells = document.getElementsByClassName('cell')\n    for (let i = 0; i < cells.length; i++) {\n      cells[i].addEventListener('click', (event) => {\n\n        // prevent additional try\n        if (this.state.clicked) return false;\n\n        if (+event.target.getAttribute('number') === this.state.randomNumber + 1) {\n          event.target.classList.add('correct');\n        } else {\n          event.target.classList.add('wrong');\n          correctElem.classList.add('show')\n        }\n        this.setState({clicked: true});\n      })\n    }\n\n  };\n\n  newGame = () => {\n    window.location.reload()\n  };\n\n  render() {\n    const {size} = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>Labyrinth on {size * size} cells </h1>\n        <div className=\"again\">\n          <button onClick={this.newGame}>Play again</button>\n        </div>\n\n        <div className=\"labyrinth\"></div>\n        <div className=\"steps\">\n          <h2>Steps</h2>\n          <div className=\"container\"></div>\n        </div>\n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}